<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:bridge="bridge.*"
               minWidth="320" minHeight="240" applicationComplete="init()">

  <fx:Declarations>
    <bridge:FABridge />
  </fx:Declarations>

  <s:layout>
    <s:VerticalLayout/>
  </s:layout>

  <fx:Script>
    <![CDATA[
      import mx.controls.Alert;
      import mx.core.FlexGlobals;
      import org.osmf.net.StreamType;

      private var streamer:String;
      private var file:String;
      private var camera:Camera;
      private var microphone:Microphone;
      private var connection:NetConnection = new NetConnection();
      private var stream:NetStream;
      private var h264Settings:H264VideoStreamSettings;
      private var courseId:String;

      private function streamToggleClicked(event:MouseEvent):void {
        if (event.target.selected) {
          publisher.videoObject.attachCamera(camera);
          stream.publish(file, 'live');
          videoToggle.selected = true;
          audioToggle.selected = true;
        } else {
          stream.close();
          publisher.videoObject.attachCamera(null);
          videoToggle.selected = false;
          audioToggle.selected = false;
        }
      }

      private function videoToggleClicked(event:MouseEvent):void {
        if (event.target.selected) {
          publisher.videoObject.attachCamera(camera);
          stream.attachCamera(camera);
        } else {
          publisher.videoObject.attachCamera(null);
          stream.attachCamera(null);
        }
      }

      private function audioToggleClicked(event:MouseEvent):void {
        if (event.target.selected) {
          stream.attachAudio(microphone);
        } else {
          stream.attachAudio(null);
        }
      }

      private function netStatusHander(event:NetStatusEvent):void {
        switch(event.info.code) {
          case 'NetConnection.Connect.Success':
            stream = new NetStream(connection);
            stream.attachCamera(camera);
            stream.attachAudio(microphone);
            h264Settings = new H264VideoStreamSettings();
            h264Settings.setProfileLevel(H264Profile.BASELINE, H264Level.LEVEL_3);
            stream.videoStreamSettings = h264Settings;
            break;
          case 'NetConnection.Connect.Failed':
            Alert.show("Video server is down");
            break;
        }
      }

      private function initDevices():void {
        camera = Camera.getCamera();
        if (camera == null) {
          Alert.show('No camera found')
        } else {
          camera.setMode(320, 240, 50, false);
          camera.setQuality(0, 70);
          camera.setKeyFrameInterval(15);
        }

        microphone = Microphone.getMicrophone();
        if (microphone == null) {
          Alert.show('No microphone found')
        } else {
          microphone.rate = 16;
          microphone.setSilenceLevel(0, -1);
          microphone.codec = "Speex";
          microphone.setUseEchoSuppression(true);
        }
      }

      private function initListeners():void {
        connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHander);
        streamToggle.addEventListener(MouseEvent.CLICK, streamToggleClicked);
        videoToggle.addEventListener(MouseEvent.CLICK, videoToggleClicked);
        audioToggle.addEventListener(MouseEvent.CLICK, audioToggleClicked);
      }

      private function init():void {
        streamer = FlexGlobals.topLevelApplication.parameters.streamer;
        file = FlexGlobals.topLevelApplication.parameters.file;
        if (file == null) {
          Alert.show('Missing flashvars: file');
          return;
        }
        if (streamer == null) {
          Alert.show('Missing flashvars: streamer');
          return;
        }
        courseId = file.split('_')[0];
        connection.connect(streamer);
        initListeners();
      }
    ]]>
  </fx:Script>

  <s:BorderContainer width="100%" height="100%" id="container" borderVisible="false">
    <s:VideoDisplay width="100%" height="100%" id="publisher" opaqueBackground="black"
                    creationComplete="initDevices()">
      <s:source>
        <s:DynamicStreamingVideoSource host="" streamType="{StreamType.LIVE}">
          <s:DynamicStreamingVideoItem />
        </s:DynamicStreamingVideoSource>
      </s:source>
    </s:VideoDisplay>
    <s:BorderContainer bottom="0" width="100%" backgroundAlpha="0.6" backgroundColor="#000000" color="#eeeeee"
                       borderVisible="false" id="controls">
      <s:layout>
        <s:HorizontalLayout paddingLeft="10" paddingRight="10" verticalAlign="middle" />
      </s:layout>
      <s:CheckBox label="Publish" id="streamToggle" />
      <s:CheckBox label="Video" id="videoToggle" enabled="{streamToggle.selected}" />
      <s:CheckBox label="Audio" id="audioToggle" enabled="{streamToggle.selected}" />
    </s:BorderContainer>
  </s:BorderContainer>
</s:Application>
